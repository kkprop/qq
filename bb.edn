{:paths ["src" "web"]
 :deps {org.clojure/data.json {:mvn/version "2.4.0"}
        babashka/process {:mvn/version "0.5.21"}
        etaoin/etaoin {:mvn/version "1.0.40"}
        babashka/nrepl-client {:git/url "https://github.com/babashka/nrepl-client"
                               :git/sha "19fbef2525e47d80b9278c49a545de58f48ee7cf"}}
 
 :tasks
 {:requires ([clojure.string :as str]
             [qq.core :as core]
             [qq.monitor :as monitor]
             [qq.context-monitor :as context-monitor]
             [qq.command-wrapper :as cmd]
             [qq.web.server :as web]
             [qq.browser.control :as browser]
             [qq.session.manager :as session-mgr]
             [qq.terminal.server :as terminal-server]
             [qq.terminal.bridge :as terminal-bridge]
             [qq.terminal.websocket-server :as ws-server]
             [qq.bootstrap :as bootstrap]
             [qq.interactive :as interactive]
             [qq.setup :as setup]
             [qq.watcher :as watcher]
             [babashka.nrepl-client :as nrepl])
  
  ;; Watcher daemon tasks
  watcher {:doc "Start QQ watcher daemon with direct JSONL logging and auto-discovery"
           :task (watcher/start-watcher)}
  
  ;; Development tasks
  dev-repl {:doc "Start development REPL"
            :task (clojure "-M:repl")}
  
  test {:doc "Run tests"
        :task (shell "bb -m qq.test")}
  
  ;; Direct Q access
  q {:doc "Attach to Q tmux session (creates if needed)"
     :task (babashka.process/exec ["tmux" "new-session" "-A" "-s" "qq" "q" "chat"])}
  
  ;; Global setup
  setup {:doc "Setup global 'bq' alias for qq commands from any directory"
         :task (setup/setup-global-alias)}
  
  ;; Config setup
  config-setup {:doc "Setup QQ configuration file with Roam Research integration"
                :task (shell "bb -e" "(require '[qq.config :as config]) (config/setup-config)")}
  
  ;; Shell completion setup
  shell-completion {:doc "Setup bash tab completion for bb tasks"
                    :task (apply bootstrap/setup-shell-completion *command-line-args*)}
  
  ;; Interactive session selector
  qq {:doc "Interactive tmux session selector or create/attach to named session"
      :task (interactive/qq-interactive-with-args *command-line-args*)}
  
  ;; Main QQ commands
  create {:doc "Create a new Q session with context"
          :task (let [context (first *command-line-args*)]
                  (if context
                    (core/create-session {:context context})
                    (println "Usage: bb create \"your context description\"")))}
  
  ask {:doc "Ask a question to current or specified session"
       :task (let [question (if (= (count *command-line-args*) 1)
                             (first *command-line-args*)
                             (str/join " " *command-line-args*))]
               (if question
                 (core/ask question)
                 (println "Usage: bb ask \"your question\"")))}
  
  ask! {:doc "Ask question asynchronously (returns immediately, streams output)"
        :task (let [question (if (= (count *command-line-args*) 1)
                              (first *command-line-args*)
                              (str/join " " *command-line-args*))]
                (if question
                  (do
                    (core/ask! question)
                    (println "ðŸŽ¯ Question sent! Processing in background with streaming output..."))
                  (println "Usage: bb ask! \"your question\"")))}
  
  list {:doc "List all Q sessions with context summaries"
        :task (core/list-sessions)}
  
  attach {:doc "Get tmux attach command for a session"
          :task (let [session-name (first *command-line-args*)]
                  (if session-name
                    (core/attach-session session-name)
                    (println "Usage: bb attach session-name")))}
  
  switch {:doc "Switch current session"
          :task (let [session-name (first *command-line-args*)]
                  (if session-name
                    (core/switch-to session-name)
                    (println "Usage: bb switch session-name")))}
  
  switch-default {:doc "Switch to default session"
                  :task (core/switch-to-default)}
  
  ;; Roam Research integration
  roam-test-config {:doc "Test Roam Research configuration"
                    :task (shell "bb -e" "(require '[qq.roam.test :as test]) (test/test-config)")}
  
  roam-test {:doc "Test Roam Research integration with sample data"
             :task (shell "bb -e" "(require '[qq.roam.test :as test]) (test/test-roam-write)")}
  
  show-pages {:doc "Show layers from specific page: bb show-pages :graph \"Page Title\""
              :task (apply core/show-pages *command-line-args*)}
  ;; Monitoring tasks
  monitor-windows {:doc "List all tmux windows"
                   :task (monitor/display-all-windows)}
  
  monitor-q {:doc "Show Q-related sessions"
             :task (do (println "ðŸ¤– Q-RELATED SESSIONS:")
                      (doseq [s (monitor/get-q-sessions)]
                        (println (str "  ðŸ“º " (:session-name s) " (" (:window-count s) " windows)"))))}
  
  monitor-status {:doc "Show monitoring status"
                  :task (monitor/display-monitoring-status)}
  
  monitor-activity {:doc "Show recent activity"
                    :task (monitor/display-recent-activity :minutes 30 :limit 20)}
  
  monitor-summary {:doc "Show Q conversation summary"
                   :task (monitor/display-q-summary)}
  
  monitor-resources {:doc "Show CPU and memory usage for all tmux windows"
                     :task (monitor/display-all-window-resources)}
  
  monitor-q-resources {:doc "Show CPU and memory usage for Q sessions only"
                       :task (monitor/display-q-session-resources)}
  
  monitor-top {:doc "Show top resource consuming windows"
               :task (monitor/display-top-consumers :limit 10)}
  
  monitor-context-activity {:doc "Show recent /context command activity"
                            :task (context-monitor/display-context-activity)}
  
  monitor-context-status {:doc "Show current context status for all Q sessions"
                          :task (context-monitor/display-all-contexts)}
  
  monitor-q-commands {:doc "Show recent Q command activity"
                      :task (cmd/display-command-activity)}
  
  ;; Q command wrappers
  context {:doc "Transparent wrapper for Q /context commands (usage: bb context add file.clj)"
           :task (apply cmd/cmd-context *command-line-args*)}
  
  q-save {:doc "Save Q conversation with monitoring (usage: bb q-save [name])"
          :task (apply cmd/cmd-save *command-line-args*)}
  
  q-load {:doc "Load Q conversation with monitoring (usage: bb q-load [name])"
          :task (apply cmd/cmd-load *command-line-args*)}
  
  q-tools {:doc "View Q tools and permissions with monitoring"
           :task (cmd/cmd-tools)}
  
  q-usage {:doc "Show Q context usage with monitoring integration"
           :task (cmd/cmd-usage)}
  
  q-model {:doc "Select Q model with tracking (usage: bb q-model [model-name])"
           :task (apply cmd/cmd-model *command-line-args*)}
  
  ;; Web Interface
  web {:doc "Start QQ web dashboard on localhost:9090"
       :task (web/start-server {:port 9090})}
  
  web-dev {:doc "Start web server in development mode"
           :task (web/start-dev-server {:port 9090})}
  
  web-stop {:doc "Stop the running web server"
            :task (web/stop-server)}
  
  ;; Terminal Server
  start-terminal-server {:doc "ðŸš€ Start WebSocket terminal server"
                         :task (ws-server/start-websocket-server 9091)}
  
  stop-terminal-server {:doc "ðŸ›‘ Stop WebSocket terminal server"
                        :task (ws-server/stop-websocket-server)}
  
  terminal-status {:doc "ðŸ“Š Get terminal server status"
                   :task (ws-server/server-status)}
  
  list-terminal-sessions {:doc "ðŸ“‹ List all terminal Q sessions"
                          :task (terminal-bridge/list-all-sessions)}
  
  ;; Session Management
  create-q-session {:doc "Create a new Q chat session in tmux"
                    :task (session-mgr/create-q-session (or (first *command-line-args*) 
                                                           (str "qq-session-" (System/currentTimeMillis))))}
  
  list-q-sessions {:doc "List all active Q sessions"
                   :task (session-mgr/get-active-sessions)}
  
  ;; Browser Control (essential only)
  browser-screenshot {:doc "Take a quick screenshot of dashboard"
                      :task (browser/quick-screenshot)}}}
